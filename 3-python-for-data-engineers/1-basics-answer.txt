# Question : Assign a value of 10 to variable a and 20 to variable b
Answer : 
a = 10 
b = 20


# Question: Store the result of a + b in a variable c and print it. What is the result of a + b?
Answer : 
c = a + b
print(c) 
Result : 30


s = '  Some string '
# Question: How do you remove the empty spaces in front of and behind the string s?
Answer : 
print(s.strip())


l = [1, 2, 3, 4] 
# Question: How do you access the elements in index 0 and 3? Print the results.
Answer : 
print(l[0:4:3])


## Dictionary: A collection of key-value pairs, where each key is mapped to a value using a hash function. Provides fast data retrieval based on keys.
d = {'a': 1, 'b': 2}
# Question: How do you access the values associated with keys 'a' and 'b'?
Answer : 
print(d['a'])
print(d['b'])
 

## Set: A collection of unique elements that do not allow duplicates
my_set = set()
my_set.add(10)
my_set.add(10)
my_set.add(10)
# Question: What will be the output of my_set?
Answer : 
{10}


## Tuple: A collection of immutable (non-changeable) elements, tuples retain their order once created.
my_tuple = (1, 'hello', 3.14)
# Question: What is the value of my_tuple?
Answer :
(1, 'hello', 3.14)


# Question: How do you access the elements in index 0 and 1 of my_tuple?
Answer :
print(my_tuple[0])
print(my_tuple[1])


count_tuple = (1, 2, 3, 1, 1, 2)
# Question: How many times does the number 1 appear in count_tuple?
Answer : 
print(count_tuple.count(1))


# Question: What is the index of the first occurrence of the number 2 in count_tuple?
Answer :
print(count_tuple.index(2))


# Question: How do you loop through a list and print its elements?
Answer : 
for i in list:
    print(i)


# Question: How do you loop through a dictionary and print its keys and values?
Answer :
for key, value in dict.items():
    print(f"{key}: {value}")


# Question: Multiply every element in list l with 2 and print the result
Answer :
l2 = [i*2 for i in l]


# function
def gt_three(input_list):
    return [elt for elt in input_list if elt > 3]
list_1 = [1, 2, 3, 4, 5, 6]
# Question: How do you use the gt_three function to filter elements greater than 3 from list_1?
Answer : 
print(gt_three(list_1))


list_2 = [1, 2, 3, 1, 1, 1]
# Question: What will be the output of gt_three(list_2)?
Answer :
[]


# Classes and Objects
# Think of a class as a blueprint and objects as things created based on that blueprint
# You can define classes in Python as shown below
class DataExtractor:

    def __init__(self, some_value):
        self.some_value = some_value

    def get_connection(self):
        # Some logic
        # some_value is accessible using self.some_value
        pass

    def close_connection(self):
        # Some logic
        # some_value is accessible using self.some_value
        pass
# Question: How do you create a DataExtractor object and print its some_value attribute?
Answer :
dataext = DataExtractor(some_value=1)
print(dataext.some_value)


from datetime import datetime
# Question: How do you print the current date in the format 'YYYY MM DD'? Hint: Google strftime
Answer :
print(datetime.today().strftime('%Y-%m-%d'))


# Exception handling: When an error occurs, we need our code to gracefully handle it without just stopping. 
# Here is how we can handle errors when the program is running
try:
    # Code that might raise an exception
    pass
except Exception as e: 
    # Code that runs if the exception occurs
    pass
else:
    # Code that runs if no exception occurs
    pass
finally:
    # Code that always runs, regardless of exceptions
    pass
# For example, let's consider exception handling on accessing an element that is not present in a list l
l = [1, 2, 3, 4, 5]
# Question: How do you handle an IndexError when accessing an invalid index in a list?
Answer :
try:
    val = list[10]
    print(val)
except IndexError:
    print("Index is invalid")
